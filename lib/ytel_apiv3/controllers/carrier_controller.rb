# ytel_apiv3
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module YtelApiv3
  # CarrierController
  class CarrierController < BaseController
    @instance = CarrierController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # Get the Carrier Lookup
    # @param [String] phone_number Required parameter: A valid 10-digit number
    # (E.164 format).
    # @return String response from the API call
    def create_lookup_carrier(phone_number)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/carrier/lookup.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'PhoneNumber' => phone_number
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Retrieve a list of carrier lookup objects.
    # @param [Integer] page Optional parameter: The page count to retrieve from
    # the total results in the collection. Page indexing starts at 1.
    # @param [Integer] page_size Optional parameter: The count of objects to
    # return per page.
    # @return String response from the API call
    def create_carrier_results(page = nil,
                               page_size = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/carrier/lookuplist.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'Page' => page,
        'PageSize' => page_size
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end
  end
end
