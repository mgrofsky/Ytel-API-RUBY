# ytel_apiv3
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module YtelApiv3
  # PhoneNumberController
  class PhoneNumberController < BaseController
    @instance = PhoneNumberController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # Get DID Score Number
    # @param [String] phonenumber Required parameter: Specifies the multiple
    # phone numbers for check updated spamscore .
    # @return String response from the API call
    def create_get_did_score(phonenumber)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/incomingphone/getdidscore.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'Phonenumber' => phonenumber
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Transfer phone number that has been purchased for from one account to
    # another account.
    # @param [String] phonenumber Required parameter: A valid 10-digit Ytel
    # number (E.164 format).
    # @param [String] fromaccountsid Required parameter: A specific Accountsid
    # from where Number is getting transfer.
    # @param [String] toaccountsid Required parameter: A specific Accountsid to
    # which Number is getting transfer.
    # @return String response from the API call
    def create_move_number(phonenumber,
                           fromaccountsid,
                           toaccountsid)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/incomingphone/transferphonenumbers.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'phonenumber' => phonenumber,
        'fromaccountsid' => fromaccountsid,
        'toaccountsid' => toaccountsid
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Purchase a phone number to be used with your Ytel account
    # @param [String] phone_number Required parameter: A valid 10-digit Ytel
    # number (E.164 format).
    # @return String response from the API call
    def create_purchase_number(phone_number)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/incomingphone/buynumber.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'PhoneNumber' => phone_number
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Remove a purchased Ytel number from your account.
    # @param [String] response_type Required parameter: Response type format xml
    # or json
    # @param [String] phone_number Required parameter: A valid 10-digit Ytel
    # number (E.164 format).
    # @return String response from the API call
    def create_release_number(response_type,
                              phone_number)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/incomingphone/releasenumber.{ResponseType}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'ResponseType' => response_type
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'PhoneNumber' => phone_number
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Retrieve the details for a phone number by its number.
    # @param [String] phone_number Required parameter: A valid Ytel 10-digit
    # phone number (E.164 format).
    # @return String response from the API call
    def create_view_details(phone_number)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/incomingphone/viewnumber.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'PhoneNumber' => phone_number
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Remove a purchased Ytel number from your account.
    # @param [String] phone_number Required parameter: A valid Ytel comma
    # separated numbers (E.164 format).
    # @return String response from the API call
    def create_bulk_release(phone_number)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/incomingphone/massreleasenumber.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'PhoneNumber' => phone_number
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Retrieve a list of available phone numbers that can be purchased and used
    # for your Ytel account.
    # @param [NumbertypeEnum] numbertype Required parameter: Number type either
    # SMS,Voice or all
    # @param [String] areacode Required parameter: Specifies the area code for
    # the returned list of available numbers. Only available for North American
    # numbers.
    # @param [Integer] pagesize Optional parameter: The count of objects to
    # return.
    # @return String response from the API call
    def create_available_numbers(numbertype,
                                 areacode,
                                 pagesize = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/incomingphone/availablenumber.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'numbertype' => numbertype,
        'areacode' => areacode,
        'pagesize' => pagesize
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Update properties for a Ytel number that has been purchased for your
    # account. Refer to the parameters list for the list of properties that can
    # be updated.
    # @param [String] phone_number Required parameter: A valid Ytel number
    # (E.164 format).
    # @param [String] voice_url Required parameter: URL requested once the call
    # connects
    # @param [String] friendly_name Optional parameter: Phone number friendly
    # name description
    # @param [String] voice_method Optional parameter: Post or Get
    # @param [String] voice_fallback_url Optional parameter: URL requested if
    # the voice URL is not available
    # @param [String] voice_fallback_method Optional parameter: Post or Get
    # @param [String] hangup_callback Optional parameter: callback url after a
    # hangup occurs
    # @param [String] hangup_callback_method Optional parameter: Post or Get
    # @param [String] heartbeat_url Optional parameter: URL requested once the
    # call connects
    # @param [String] heartbeat_method Optional parameter: URL that can be
    # requested every 60 seconds during the call to notify of elapsed time
    # @param [String] sms_url Optional parameter: URL requested when an SMS is
    # received
    # @param [String] sms_method Optional parameter: Post or Get
    # @param [String] sms_fallback_url Optional parameter: URL used if any
    # errors occur during execution of InboundXML from an SMS or at initial
    # request of the SmsUrl.
    # @param [String] sms_fallback_method Optional parameter: The HTTP method
    # Ytel will use when URL requested if the SmsUrl is not available.
    # @return String response from the API call
    def update_number(phone_number,
                      voice_url,
                      friendly_name = nil,
                      voice_method = nil,
                      voice_fallback_url = nil,
                      voice_fallback_method = nil,
                      hangup_callback = nil,
                      hangup_callback_method = nil,
                      heartbeat_url = nil,
                      heartbeat_method = nil,
                      sms_url = nil,
                      sms_method = nil,
                      sms_fallback_url = nil,
                      sms_fallback_method = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/incomingphone/updatenumber.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'PhoneNumber' => phone_number,
        'VoiceUrl' => voice_url,
        'FriendlyName' => friendly_name,
        'VoiceMethod' => voice_method,
        'VoiceFallbackUrl' => voice_fallback_url,
        'VoiceFallbackMethod' => voice_fallback_method,
        'HangupCallback' => hangup_callback,
        'HangupCallbackMethod' => hangup_callback_method,
        'HeartbeatUrl' => heartbeat_url,
        'HeartbeatMethod' => heartbeat_method,
        'SmsUrl' => sms_url,
        'SmsMethod' => sms_method,
        'SmsFallbackUrl' => sms_fallback_url,
        'SmsFallbackMethod' => sms_fallback_method
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Retrieve a list of purchased phones numbers associated with your Ytel
    # account.
    # @param [Integer] page Optional parameter: Which page of the overall
    # response will be returned. Page indexing starts at 1.
    # @param [Integer] page_size Optional parameter: The page count to retrieve
    # from the total results in the collection. Page indexing starts at 1.
    # @param [NumberType14Enum] number_type Optional parameter: The capability
    # supported by the number.Number type either SMS,Voice or all
    # @param [String] friendly_name Optional parameter: A human-readable label
    # added to the number object.
    # @return String response from the API call
    def create_list_numbers(page = nil,
                            page_size = nil,
                            number_type = nil,
                            friendly_name = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/incomingphone/listnumber.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'Page' => page,
        'PageSize' => page_size,
        'NumberType' => number_type,
        'FriendlyName' => friendly_name
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Update properties for a Ytel numbers that has been purchased for your
    # account. Refer to the parameters list for the list of properties that can
    # be updated.
    # @param [String] phone_number Required parameter: A valid comma(,)
    # separated Ytel numbers. (E.164 format).
    # @param [String] voice_url Required parameter: The URL returning InboundXML
    # incoming calls should execute when connected.
    # @param [String] friendly_name Optional parameter: A human-readable value
    # for labeling the number.
    # @param [String] voice_method Optional parameter: Specifies the HTTP method
    # used to request the VoiceUrl once incoming call connects.
    # @param [String] voice_fallback_url Optional parameter: URL used if any
    # errors occur during execution of InboundXML on a call or at initial
    # request of the voice url
    # @param [String] voice_fallback_method Optional parameter: Specifies the
    # HTTP method used to request the VoiceFallbackUrl once incoming call
    # connects.
    # @param [String] hangup_callback Optional parameter: URL that can be
    # requested to receive notification when and how incoming call has ended.
    # @param [String] hangup_callback_method Optional parameter: The HTTP method
    # Ytel will use when requesting the HangupCallback URL.
    # @param [String] heartbeat_url Optional parameter: URL that can be used to
    # monitor the phone number.
    # @param [String] heartbeat_method Optional parameter: The HTTP method Ytel
    # will use when requesting the HeartbeatUrl.
    # @param [String] sms_url Optional parameter: URL requested when an SMS is
    # received.
    # @param [String] sms_method Optional parameter: The HTTP method Ytel will
    # use when requesting the SmsUrl.
    # @param [String] sms_fallback_url Optional parameter: URL used if any
    # errors occur during execution of InboundXML from an SMS or at initial
    # request of the SmsUrl.
    # @param [String] sms_fallback_method Optional parameter: The HTTP method
    # Ytel will use when URL requested if the SmsUrl is not available.
    # @return String response from the API call
    def create_bulk_update_numbers(phone_number,
                                   voice_url,
                                   friendly_name = nil,
                                   voice_method = nil,
                                   voice_fallback_url = nil,
                                   voice_fallback_method = nil,
                                   hangup_callback = nil,
                                   hangup_callback_method = nil,
                                   heartbeat_url = nil,
                                   heartbeat_method = nil,
                                   sms_url = nil,
                                   sms_method = nil,
                                   sms_fallback_url = nil,
                                   sms_fallback_method = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/incomingphone/massupdatenumber.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'PhoneNumber' => phone_number,
        'VoiceUrl' => voice_url,
        'FriendlyName' => friendly_name,
        'VoiceMethod' => voice_method,
        'VoiceFallbackUrl' => voice_fallback_url,
        'VoiceFallbackMethod' => voice_fallback_method,
        'HangupCallback' => hangup_callback,
        'HangupCallbackMethod' => hangup_callback_method,
        'HeartbeatUrl' => heartbeat_url,
        'HeartbeatMethod' => heartbeat_method,
        'SmsUrl' => sms_url,
        'SmsMethod' => sms_method,
        'SmsFallbackUrl' => sms_fallback_url,
        'SmsFallbackMethod' => sms_fallback_method
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Purchase a selected number of DID's from specific area codes to be used
    # with your Ytel account.
    # @param [NumberType15Enum] number_type Required parameter: The capability
    # the number supports.
    # @param [String] area_code Required parameter: Specifies the area code for
    # the returned list of available numbers. Only available for North American
    # numbers.
    # @param [String] quantity Required parameter: A positive integer that tells
    # how many number you want to buy at a time.
    # @param [String] leftover Optional parameter: If desired quantity is
    # unavailable purchase what is available .
    # @return String response from the API call
    def create_bulk_buy_numbers(number_type,
                                area_code,
                                quantity,
                                leftover = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/incomingphone/bulkbuy.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'NumberType' => number_type,
        'AreaCode' => area_code,
        'Quantity' => quantity,
        'Leftover' => leftover
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end
  end
end
