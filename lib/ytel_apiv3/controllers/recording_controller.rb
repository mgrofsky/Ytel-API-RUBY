# ytel_apiv3
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module YtelApiv3
  # RecordingController
  class RecordingController < BaseController
    @instance = RecordingController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # Remove a recording from your Ytel account.
    # @param [String] recordingsid Required parameter: The unique identifier for
    # a recording.
    # @return String response from the API call
    def create_delete_recording(recordingsid)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/recording/deleterecording.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'recordingsid' => recordingsid
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Retrieve the recording of a call by its RecordingSid. This resource will
    # return information regarding the call such as start time, end time,
    # duration, and so forth.
    # @param [String] recordingsid Required parameter: The unique identifier for
    # the recording.
    # @return String response from the API call
    def create_view_recording(recordingsid)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/recording/viewrecording.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'recordingsid' => recordingsid
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Retrieve a list of recording objects.
    # @param [Integer] page Optional parameter: The page count to retrieve from
    # the total results in the collection. Page indexing starts at 1.
    # @param [Integer] pagesize Optional parameter: The count of objects to
    # return per page.
    # @param [String] datecreated Optional parameter: Filter results by creation
    # date
    # @param [String] callsid Optional parameter: The unique identifier for a
    # call.
    # @return String response from the API call
    def create_list_recordings(page = nil,
                               pagesize = nil,
                               datecreated = nil,
                               callsid = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/recording/listrecording.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'page' => page,
        'pagesize' => pagesize,
        'Datecreated' => datecreated,
        'callsid' => callsid
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end
  end
end
