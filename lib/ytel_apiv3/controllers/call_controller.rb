# ytel_apiv3
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module YtelApiv3
  # CallController
  class CallController < BaseController
    @instance = CallController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # Retrieve a single voice call’s information by its CallSid.
    # @param [String] call_sid Required parameter: The unique identifier for the
    # voice call.
    # @return String response from the API call
    def create_view_call1(call_sid)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/calls/viewcalldetail.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'callSid' => call_sid
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Retrieve a single voice call’s information by its CallSid.
    # @param [String] callsid Required parameter: The unique identifier for the
    # voice call.
    # @return String response from the API call
    def create_view_call(callsid)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/calls/viewcalls.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'callsid' => callsid
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Play Dtmf and send the Digit
    # @param [String] call_sid Required parameter: The unique identifier of each
    # call resource
    # @param [String] play_dtmf Required parameter: DTMF digits to play to the
    # call. 0-9, #, *, W, or w
    # @param [PlayDtmfDirectionEnum] play_dtmf_direction Optional parameter: The
    # leg of the call DTMF digits should be sent to
    # @return String response from the API call
    def create_play_dtmf(call_sid,
                         play_dtmf,
                         play_dtmf_direction = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/calls/senddigits.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'CallSid' => call_sid,
        'PlayDtmf' => play_dtmf,
        'PlayDtmfDirection' => play_dtmf_direction
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # You can experiment with initiating a call through Ytel and view the
    # request response generated when doing so and get the response in json
    # @param [String] from Required parameter: A valid Ytel Voice enabled number
    # (E.164 format) that will be initiating the phone call.
    # @param [String] to Required parameter: To number
    # @param [String] url Required parameter: URL requested once the call
    # connects
    # @param [String] method Optional parameter: Specifies the HTTP method used
    # to request the required URL once call connects.
    # @param [String] status_call_back_url Optional parameter: URL that can be
    # requested to receive notification when call has ended. A set of default
    # parameters will be sent here once the call is finished.
    # @param [String] status_call_back_method Optional parameter: Specifies the
    # HTTP methodlinkclass used to request StatusCallbackUrl.
    # @param [String] fall_back_url Optional parameter: URL requested if the
    # initial Url parameter fails or encounters an error
    # @param [String] fall_back_method Optional parameter: Specifies the HTTP
    # method used to request the required FallbackUrl once call connects.
    # @param [String] heart_beat_url Optional parameter: URL that can be
    # requested every 60 seconds during the call to notify of elapsed tim
    # @param [String] heart_beat_method Optional parameter: Specifies the HTTP
    # method used to request HeartbeatUrl.
    # @param [Integer] timeout Optional parameter: Time (in seconds) Ytel should
    # wait while the call is ringing before canceling the call
    # @param [String] play_dtmf Optional parameter: DTMF Digits to play to the
    # call once it connects. 0-9, #, or *
    # @param [Boolean] hide_caller_id Optional parameter: Specifies if the
    # caller id will be hidden
    # @param [Boolean] record Optional parameter: Specifies if the call should
    # be recorded
    # @param [String] record_call_back_url Optional parameter: Recording
    # parameters will be sent here upon completion
    # @param [String] record_call_back_method Optional parameter: Method used to
    # request the RecordCallback URL.
    # @param [Boolean] transcribe Optional parameter: Specifies if the call
    # recording should be transcribed
    # @param [String] transcribe_call_back_url Optional parameter: Transcription
    # parameters will be sent here upon completion
    # @param [IfMachineEnum] if_machine Optional parameter: How Ytel should
    # handle the receiving numbers voicemail machine
    # @param [String] if_machine_url Optional parameter: URL requested when
    # IfMachine=continue
    # @param [String] if_machine_method Optional parameter: Method used to
    # request the IfMachineUrl.
    # @param [Boolean] feedback Optional parameter: Specify if survey should be
    # enable or not
    # @param [String] survey_id Optional parameter: The unique identifier for
    # the survey.
    # @return String response from the API call
    def create_make_call(from,
                         to,
                         url,
                         method = nil,
                         status_call_back_url = nil,
                         status_call_back_method = nil,
                         fall_back_url = nil,
                         fall_back_method = nil,
                         heart_beat_url = nil,
                         heart_beat_method = nil,
                         timeout = nil,
                         play_dtmf = nil,
                         hide_caller_id = nil,
                         record = nil,
                         record_call_back_url = nil,
                         record_call_back_method = nil,
                         transcribe = nil,
                         transcribe_call_back_url = nil,
                         if_machine = nil,
                         if_machine_url = nil,
                         if_machine_method = nil,
                         feedback = nil,
                         survey_id = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/calls/makecall.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'From' => from,
        'To' => to,
        'Url' => url,
        'Method' => method,
        'StatusCallBackUrl' => status_call_back_url,
        'StatusCallBackMethod' => status_call_back_method,
        'FallBackUrl' => fall_back_url,
        'FallBackMethod' => fall_back_method,
        'HeartBeatUrl' => heart_beat_url,
        'HeartBeatMethod' => heart_beat_method,
        'Timeout' => timeout,
        'PlayDtmf' => play_dtmf,
        'HideCallerId' => hide_caller_id,
        'Record' => record,
        'RecordCallBackUrl' => record_call_back_url,
        'RecordCallBackMethod' => record_call_back_method,
        'Transcribe' => transcribe,
        'TranscribeCallBackUrl' => transcribe_call_back_url,
        'IfMachine' => if_machine,
        'IfMachineUrl' => if_machine_url,
        'IfMachineMethod' => if_machine_method,
        'Feedback' => feedback,
        'SurveyId' => survey_id
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Play Audio from a url
    # @param [String] call_sid Required parameter: The unique identifier of each
    # call resource
    # @param [String] audio_url Required parameter: URL to sound that should be
    # played. You also can add more than one audio file using semicolons e.g.
    # http://example.com/audio1.mp3;http://example.com/audio2.wav
    # @param [String] say_text Required parameter: Valid alphanumeric string
    # that should be played to the In-progress call.
    # @param [Integer] length Optional parameter: Time limit in seconds for
    # audio play back
    # @param [DirectionEnum] direction Optional parameter: The leg of the call
    # audio will be played to
    # @param [Boolean] mix Optional parameter: If false, all other audio will be
    # muted
    # @return String response from the API call
    def create_play_audio(call_sid,
                          audio_url,
                          say_text,
                          length = nil,
                          direction = nil,
                          mix = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/calls/playaudios.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'CallSid' => call_sid,
        'AudioUrl' => audio_url,
        'SayText' => say_text,
        'Length' => length,
        'Direction' => direction,
        'Mix' => mix
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Start or stop recording of an in-progress voice call.
    # @param [String] call_sid Required parameter: The unique identifier of each
    # call resource
    # @param [Boolean] record Required parameter: Set true to initiate recording
    # or false to terminate recording
    # @param [Direction4Enum] direction Optional parameter: The leg of the call
    # to record
    # @param [Integer] time_limit Optional parameter: Time in seconds the
    # recording duration should not exceed
    # @param [String] call_back_url Optional parameter: URL consulted after the
    # recording completes
    # @param [FileformatEnum] fileformat Optional parameter: Format of the
    # recording file. Can be .mp3 or .wav
    # @return String response from the API call
    def create_record_call(call_sid,
                           record,
                           direction = nil,
                           time_limit = nil,
                           call_back_url = nil,
                           fileformat = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/calls/recordcalls.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'CallSid' => call_sid,
        'Record' => record,
        'Direction' => direction,
        'TimeLimit' => time_limit,
        'CallBackUrl' => call_back_url,
        'Fileformat' => fileformat
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Add audio voice effects to the an in-progress voice call.
    # @param [String] call_sid Required parameter: The unique identifier for the
    # in-progress voice call.
    # @param [AudioDirectionEnum] audio_direction Optional parameter: The
    # direction the audio effect should be placed on. If IN, the effects will
    # occur on the incoming audio stream. If OUT, the effects will occur on the
    # outgoing audio stream.
    # @param [Float] pitch_semi_tones Optional parameter: Set the pitch in
    # semitone (half-step) intervals. Value between -14 and 14
    # @param [Float] pitch_octaves Optional parameter: Set the pitch in octave
    # intervals.. Value between -1 and 1
    # @param [Float] pitch Optional parameter: Set the pitch (lowness/highness)
    # of the audio. The higher the value, the higher the pitch. Value greater
    # than 0
    # @param [Float] rate Optional parameter: Set the rate for audio. The lower
    # the value, the lower the rate. value greater than 0
    # @param [Float] tempo Optional parameter: Set the tempo (speed) of the
    # audio. A higher value denotes a faster tempo. Value greater than 0
    # @return String response from the API call
    def create_voice_effect(call_sid,
                            audio_direction = nil,
                            pitch_semi_tones = nil,
                            pitch_octaves = nil,
                            pitch = nil,
                            rate = nil,
                            tempo = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/calls/voiceeffect.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'CallSid' => call_sid,
        'AudioDirection' => audio_direction,
        'PitchSemiTones' => pitch_semi_tones,
        'PitchOctaves' => pitch_octaves,
        'Pitch' => pitch,
        'Rate' => rate,
        'Tempo' => tempo
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Interrupt the Call by Call Sid
    # @param [String] call_sid Required parameter: The unique identifier for
    # voice call that is in progress.
    # @param [String] url Optional parameter: URL the in-progress call will be
    # redirected to
    # @param [String] method Optional parameter: The method used to request the
    # above Url parameter
    # @param [StatusEnum] status Optional parameter: Status to set the
    # in-progress call to
    # @return String response from the API call
    def create_interrupt_call(call_sid,
                              url = nil,
                              method = nil,
                              status = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/calls/interruptcalls.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'CallSid' => call_sid,
        'Url' => url,
        'Method' => method,
        'Status' => status
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # A list of calls associated with your Ytel account
    # @param [Integer] page Optional parameter: The page count to retrieve from
    # the total results in the collection. Page indexing starts at 1.
    # @param [Integer] page_size Optional parameter: Number of individual
    # resources listed in the response per page
    # @param [String] to Optional parameter: Filter calls that were sent to this
    # 10-digit number (E.164 format).
    # @param [String] from Optional parameter: Filter calls that were sent from
    # this 10-digit number (E.164 format).
    # @param [String] date_created Optional parameter: Return calls that are
    # from a specified date.
    # @return String response from the API call
    def create_list_calls(page = nil,
                          page_size = nil,
                          to = nil,
                          from = nil,
                          date_created = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/calls/listcalls.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'Page' => page,
        'PageSize' => page_size,
        'To' => to,
        'From' => from,
        'DateCreated' => date_created
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Initiate an outbound Ringless Voicemail through Ytel.
    # @param [String] from Required parameter: A valid Ytel Voice enabled number
    # (E.164 format) that will be initiating the phone call.
    # @param [String] rvm_caller_id Required parameter: A required secondary
    # Caller ID for RVM to work.
    # @param [String] to Required parameter: A valid number (E.164 format) that
    # will receive the phone call.
    # @param [String] voice_mail_url Required parameter: The URL requested once
    # the RVM connects. A set of default parameters will be sent here.
    # @param [String] method Optional parameter: Specifies the HTTP method used
    # to request the required URL once call connects.
    # @param [String] status_call_back_url Optional parameter: URL that can be
    # requested to receive notification when call has ended. A set of default
    # parameters will be sent here once the call is finished.
    # @param [String] stats_call_back_method Optional parameter: Specifies the
    # HTTP method used to request the required StatusCallBackUrl once call
    # connects.
    # @return String response from the API call
    def create_send_rvm(from,
                        rvm_caller_id,
                        to,
                        voice_mail_url,
                        method = nil,
                        status_call_back_url = nil,
                        stats_call_back_method = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/calls/makervm.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'From' => from,
        'RVMCallerId' => rvm_caller_id,
        'To' => to,
        'VoiceMailURL' => voice_mail_url,
        'Method' => method,
        'StatusCallBackUrl' => status_call_back_url,
        'StatsCallBackMethod' => stats_call_back_method
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Group Call
    # @param [String] from Required parameter: This number to display on Caller
    # ID as calling
    # @param [String] to Required parameter: Please enter multiple E164 number.
    # You can add max 10 numbers. Add numbers separated with comma. e.g :
    # 1111111111,2222222222
    # @param [String] url Required parameter: URL requested once the call
    # connects
    # @param [String] group_confirm_key Required parameter: Define the DTMF that
    # the called party should send to bridge the call. Allowed Values : 0-9, #,
    # *
    # @param [GroupConfirmFileEnum] group_confirm_file Required parameter:
    # Specify the audio file you want to play when the called party picks up the
    # call
    # @param [String] method Optional parameter: Specifies the HTTP method used
    # to request the required URL once call connects.
    # @param [String] status_call_back_url Optional parameter: URL that can be
    # requested to receive notification when call has ended. A set of default
    # parameters will be sent here once the call is finished.
    # @param [String] status_call_back_method Optional parameter: Specifies the
    # HTTP methodlinkclass used to request StatusCallbackUrl.
    # @param [String] fall_back_url Optional parameter: URL requested if the
    # initial Url parameter fails or encounters an error
    # @param [String] fall_back_method Optional parameter: Specifies the HTTP
    # method used to request the required FallbackUrl once call connects.
    # @param [String] heart_beat_url Optional parameter: URL that can be
    # requested every 60 seconds during the call to notify of elapsed time and
    # pass other general information.
    # @param [String] heart_beat_method Optional parameter: Specifies the HTTP
    # method used to request HeartbeatUrl.
    # @param [Integer] timeout Optional parameter: Time (in seconds) we should
    # wait while the call is ringing before canceling the call
    # @param [String] play_dtmf Optional parameter: DTMF Digits to play to the
    # call once it connects. 0-9, #, or *
    # @param [String] hide_caller_id Optional parameter: Specifies if the caller
    # id will be hidden
    # @param [Boolean] record Optional parameter: Specifies if the call should
    # be recorded
    # @param [String] record_call_back_url Optional parameter: Recording
    # parameters will be sent here upon completion
    # @param [String] record_call_back_method Optional parameter: Method used to
    # request the RecordCallback URL.
    # @param [Boolean] transcribe Optional parameter: Specifies if the call
    # recording should be transcribed
    # @param [String] transcribe_call_back_url Optional parameter: Transcription
    # parameters will be sent here upon completion
    # @return String response from the API call
    def create_group_call(from,
                          to,
                          url,
                          group_confirm_key,
                          group_confirm_file,
                          method = nil,
                          status_call_back_url = nil,
                          status_call_back_method = nil,
                          fall_back_url = nil,
                          fall_back_method = nil,
                          heart_beat_url = nil,
                          heart_beat_method = nil,
                          timeout = nil,
                          play_dtmf = nil,
                          hide_caller_id = nil,
                          record = nil,
                          record_call_back_url = nil,
                          record_call_back_method = nil,
                          transcribe = nil,
                          transcribe_call_back_url = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/calls/groupcall.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'From' => from,
        'To' => to,
        'Url' => url,
        'GroupConfirmKey' => group_confirm_key,
        'GroupConfirmFile' => group_confirm_file,
        'Method' => method,
        'StatusCallBackUrl' => status_call_back_url,
        'StatusCallBackMethod' => status_call_back_method,
        'FallBackUrl' => fall_back_url,
        'FallBackMethod' => fall_back_method,
        'HeartBeatUrl' => heart_beat_url,
        'HeartBeatMethod' => heart_beat_method,
        'Timeout' => timeout,
        'PlayDtmf' => play_dtmf,
        'HideCallerId' => hide_caller_id,
        'Record' => record,
        'RecordCallBackUrl' => record_call_back_url,
        'RecordCallBackMethod' => record_call_back_method,
        'Transcribe' => transcribe,
        'TranscribeCallBackUrl' => transcribe_call_back_url
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end
  end
end
