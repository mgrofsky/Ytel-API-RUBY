# ytel_apiv3
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module YtelApiv3
  # AddressController
  class AddressController < BaseController
    @instance = AddressController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # To delete Address to your address book
    # @param [String] addressid Required parameter: The identifier of the
    # address to be deleted.
    # @return String response from the API call
    def create_delete_address(addressid)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/address/deleteaddress.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'addressid' => addressid
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Validates an address given.
    # @param [String] addressid Required parameter: The identifier of the
    # address to be verified.
    # @return String response from the API call
    def create_verify_address(addressid)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/address/verifyaddress.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'addressid' => addressid
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # View Address Specific address Book by providing the address id
    # @param [String] addressid Required parameter: The identifier of the
    # address to be retrieved.
    # @return String response from the API call
    def create_view_address(addressid)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/address/viewaddress.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'addressid' => addressid
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # List All Address
    # @param [Integer] page Optional parameter: The page count to retrieve from
    # the total results in the collection. Page indexing starts at 1.
    # @param [Integer] pagesize Optional parameter: How many results to return,
    # default is 10, max is 100, must be an integer
    # @param [String] addressid Optional parameter: addresses Sid
    # @param [String] date_created Optional parameter: date created address.
    # @return String response from the API call
    def create_list_addresses(page = nil,
                              pagesize = nil,
                              addressid = nil,
                              date_created = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/address/listaddress.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'page' => page,
        'pagesize' => pagesize,
        'addressid' => addressid,
        'dateCreated' => date_created
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # To add an address to your address book, you create a new address object.
    # You can retrieve and delete individual addresses as well as get a list of
    # addresses. Addresses are identified by a unique random ID.
    # @param [String] name Required parameter: Name of user
    # @param [String] address Required parameter: Address of user.
    # @param [String] country Required parameter: Must be a 2 letter country
    # short-name code (ISO 3166)
    # @param [String] state Required parameter: Must be a 2 letter State eg. CA
    # for US. For Some Countries it can be greater than 2 letters.
    # @param [String] city Required parameter: City Name.
    # @param [String] zip Required parameter: Zip code of city.
    # @param [String] description Optional parameter: Description of
    # addresses.
    # @param [String] email Optional parameter: Email Id of user.
    # @param [String] phone Optional parameter: Phone number of user.
    # @return String response from the API call
    def create_address(name,
                       address,
                       country,
                       state,
                       city,
                       zip,
                       description = nil,
                       email = nil,
                       phone = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/address/createaddress.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'Name' => name,
        'Address' => address,
        'Country' => country,
        'State' => state,
        'City' => city,
        'Zip' => zip,
        'Description' => description,
        'email' => email,
        'Phone' => phone
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end
  end
end
