# ytel_apiv3
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module YtelApiv3
  # ConferenceController
  class ConferenceController < BaseController
    @instance = ConferenceController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # Play an audio file during a conference.
    # @param [String] conference_sid Required parameter: The unique identifier
    # for a conference object.
    # @param [String] participant_sid Required parameter: The unique identifier
    # for a participant object.
    # @param [AudioUrlEnum] audio_url Required parameter: The URL for the audio
    # file that is to be played during the conference. Multiple audio files can
    # be chained by using a semicolon.
    # @return String response from the API call
    def create_play_audio(conference_sid,
                          participant_sid,
                          audio_url)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/conferences/playAudio.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'ConferenceSid' => conference_sid,
        'ParticipantSid' => participant_sid,
        'AudioUrl' => audio_url
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Remove a participant from a conference.
    # @param [String] participant_sid Required parameter: The unique identifier
    # for a participant object.
    # @param [String] conference_sid Required parameter: The unique identifier
    # for a conference object.
    # @return String response from the API call
    def create_hangup_participant(participant_sid,
                                  conference_sid)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/conferences/hangupParticipant.json'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'ParticipantSid' => participant_sid
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'ConferenceSid' => conference_sid
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Retrieve information about a conference by its ConferenceSid.
    # @param [String] conference_sid Required parameter: The unique identifier
    # of each conference resource
    # @return String response from the API call
    def create_view_conference(conference_sid)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/conferences/viewconference.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'ConferenceSid' => conference_sid
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Retrieve information about a participant by its ParticipantSid.
    # @param [String] conference_sid Required parameter: The unique identifier
    # for a conference object.
    # @param [String] participant_sid Required parameter: The unique identifier
    # for a participant object.
    # @return String response from the API call
    def create_view_participant(conference_sid,
                                participant_sid)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/conferences/viewParticipant.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'ConferenceSid' => conference_sid,
        'ParticipantSid' => participant_sid
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Deaf Mute Participant
    # @param [String] conference_sid Required parameter: ID of the active
    # conference
    # @param [String] participant_sid Required parameter: ID of an active
    # participant
    # @param [Boolean] muted Optional parameter: Mute a participant
    # @param [Boolean] deaf Optional parameter: Make it so a participant cant
    # hear
    # @return String response from the API call
    def create_silence_participant(conference_sid,
                                   participant_sid,
                                   muted = nil,
                                   deaf = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/conferences/deafMuteParticipant.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'conferenceSid' => conference_sid,
        'ParticipantSid' => participant_sid,
        'Muted' => muted,
        'Deaf' => deaf
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Add Participant in conference
    # @param [String] conference_sid Required parameter: The unique identifier
    # for a conference object.
    # @param [String] participant_number Required parameter: The phone number of
    # the participant to be added.
    # @param [Boolean] muted Optional parameter: Specifies if participant should
    # be muted.
    # @param [Boolean] deaf Optional parameter: Specifies if the participant
    # should hear audio in the conference.
    # @return String response from the API call
    def add_participant(conference_sid,
                        participant_number,
                        muted = nil,
                        deaf = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/conferences/addParticipant.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'ConferenceSid' => conference_sid,
        'ParticipantNumber' => participant_number,
        'Muted' => muted,
        'Deaf' => deaf
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Here you can experiment with initiating a conference call through Ytel and
    # view the request response generated when doing so.
    # @param [String] url Required parameter: URL requested once the conference
    # connects
    # @param [String] from Required parameter: A valid 10-digit number (E.164
    # format) that will be initiating the conference call.
    # @param [String] to Required parameter: A valid 10-digit number (E.164
    # format) that is to receive the conference call.
    # @param [String] method Optional parameter: Specifies the HTTP method used
    # to request the required URL once call connects.
    # @param [String] status_call_back_url Optional parameter: URL that can be
    # requested to receive notification when call has ended. A set of default
    # parameters will be sent here once the conference is finished.
    # @param [String] status_call_back_method Optional parameter: Specifies the
    # HTTP methodlinkclass used to request StatusCallbackUrl.
    # @param [String] fallback_url Optional parameter: URL requested if the
    # initial Url parameter fails or encounters an error
    # @param [String] fallback_method Optional parameter: Specifies the HTTP
    # method used to request the required FallbackUrl once call connects.
    # @param [Boolean] record Optional parameter: Specifies if the conference
    # should be recorded.
    # @param [String] record_call_back_url Optional parameter: Recording
    # parameters will be sent here upon completion.
    # @param [String] record_call_back_method Optional parameter: Specifies the
    # HTTP method used to request the required URL once conference connects.
    # @param [String] schedule_time Optional parameter: Schedule conference in
    # future. Schedule time must be greater than current time
    # @param [Integer] timeout Optional parameter: The number of seconds the
    # call stays on the line while waiting for an answer. The max time limit is
    # 999 and the default limit is 60 seconds but lower times can be set.
    # @return String response from the API call
    def create_conference(url,
                          from,
                          to,
                          method = nil,
                          status_call_back_url = nil,
                          status_call_back_method = nil,
                          fallback_url = nil,
                          fallback_method = nil,
                          record = nil,
                          record_call_back_url = nil,
                          record_call_back_method = nil,
                          schedule_time = nil,
                          timeout = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/conferences/createConference.json'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'Url' => url
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'From' => from,
        'To' => to,
        'Method' => method,
        'StatusCallBackUrl' => status_call_back_url,
        'StatusCallBackMethod' => status_call_back_method,
        'FallbackUrl' => fallback_url,
        'FallbackMethod' => fallback_method,
        'Record' => record,
        'RecordCallBackUrl' => record_call_back_url,
        'RecordCallBackMethod' => record_call_back_method,
        'ScheduleTime' => schedule_time,
        'Timeout' => timeout
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Retrieve a list of participants for an in-progress conference.
    # @param [String] conference_sid Required parameter: The unique identifier
    # for a conference.
    # @param [Integer] page Optional parameter: The page count to retrieve from
    # the total results in the collection. Page indexing starts at 1.
    # @param [Integer] pagesize Optional parameter: The count of objects to
    # return per page.
    # @param [Boolean] muted Optional parameter: Specifies if participant should
    # be muted.
    # @param [Boolean] deaf Optional parameter: Specifies if the participant
    # should hear audio in the conference.
    # @return String response from the API call
    def create_list_participants(conference_sid,
                                 page = nil,
                                 pagesize = nil,
                                 muted = nil,
                                 deaf = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/conferences/listParticipant.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'ConferenceSid' => conference_sid,
        'Page' => page,
        'Pagesize' => pagesize,
        'Muted' => muted,
        'Deaf' => deaf
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Retrieve a list of conference objects.
    # @param [Integer] page Optional parameter: The page count to retrieve from
    # the total results in the collection. Page indexing starts at 1.
    # @param [Integer] pagesize Optional parameter: Number of individual
    # resources listed in the response per page
    # @param [String] friendly_name Optional parameter: Only return conferences
    # with the specified FriendlyName
    # @param [String] date_created Optional parameter: Conference created date
    # @return String response from the API call
    def create_list_conferences(page = nil,
                                pagesize = nil,
                                friendly_name = nil,
                                date_created = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/conferences/listconference.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'page' => page,
        'pagesize' => pagesize,
        'FriendlyName' => friendly_name,
        'DateCreated' => date_created
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end
  end
end
