# ytel_apiv3
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module YtelApiv3
  # SubAccountController
  class SubAccountController < BaseController
    @instance = SubAccountController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # Suspend or unsuspend
    # @param [String] sub_account_sid Required parameter: The SubaccountSid to
    # be activated or suspended
    # @param [MActivateEnum] m_activate Required parameter: 0 to suspend or 1 to
    # activate
    # @return String response from the API call
    def create_toggle_subaccount_status(sub_account_sid,
                                        m_activate)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/user/subaccountactivation.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'SubAccountSID' => sub_account_sid,
        'mActivate' => m_activate
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Delete sub account or merge numbers into parent
    # @param [String] sub_account_sid Required parameter: The SubaccountSid to
    # be deleted
    # @param [MergeNumberEnum] merge_number Required parameter: 0 to delete or 1
    # to merge numbers to parent account.
    # @return String response from the API call
    def create_delete_subaccount(sub_account_sid,
                                 merge_number)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/user/deletesubaccount.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'SubAccountSID' => sub_account_sid,
        'MergeNumber' => merge_number
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Create a sub user account under the parent account
    # @param [String] first_name Required parameter: Sub account user first
    # name
    # @param [String] last_name Required parameter: sub account user last name
    # @param [String] email Required parameter: Sub account email address
    # @param [String] friendly_name Required parameter: Descriptive name of the
    # sub account
    # @param [String] password Required parameter: The password of the sub
    # account.  Please make sure to make as password that is at least 8
    # characters long, contain a symbol, uppercase and a number.
    # @return String response from the API call
    def create_subaccount(first_name,
                          last_name,
                          email,
                          friendly_name,
                          password)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/user/createsubaccount.json'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'FirstName' => first_name,
        'LastName' => last_name,
        'Email' => email,
        'FriendlyName' => friendly_name,
        'Password' => password
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end
  end
end
